"""
    ORM for index server
"""
import peewee
import os

# pylint: disable=too-few-public-methods

DB = peewee.MySQLDatabase(os.getenv('MYSQL_ENV_MYSQL_DATABASE'),
                          host=os.getenv('MYSQL_PORT_3306_TCP_ADDR'),
                          port=int(os.getenv('MYSQL_PORT_3306_TCP_PORT')),
                          user=os.getenv('MYSQL_ENV_MYSQL_USER'),
                          passwd=os.getenv('MYSQL_ENV_MYSQL_PASSWORD'))

class BaseModel(peewee.Model):
    """
    auto-generated by pwiz
    """
    class Meta(object):
        """
        map to the database connected above
        """
        database = DB

class IngestState(BaseModel):
    """
    maps a python record to a mysql table
    """
    # unique index
    job_id = peewee.BigIntegerField(primary_key=True, db_column='id')
    state = peewee.CharField(db_column='state')
    task = peewee.CharField(db_column='task')
    task_percent = peewee.DecimalField(db_column='task_percent')

    class Meta(object):
        """
        map to uniqueindex table
        """
        db_table = 'ingeststate'

def update_state(job_id, state, task, task_percent):
    """
    updates the state of an ingest job
    """
    if job_id and job_id >= 0:
        record = IngestState.get_or_create(job_id=job_id,
                                           defaults={'task':'', 'task_percent':0, 'state':''})[0]

        record.state = state
        record.task = task
        record.task_percent = task_percent
        record.save()

def read_state(job_id):
    """
    returns the state of an ingest job as a json object
    """
    if job_id and job_id >= 0:
        record = IngestState.get(job_id=job_id)
    else:
        record = IngestState()
        record.state = 'DATA_ACCESS_ERROR'
        record.task = 'read_state'
        record.task_percent = 0

    return record

